name: Functionality test for helm chart
run-name: ${{ github.actor }} is testing out helm chart functions üöÄ

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    paths:
      - ".github/**"
      - "**.py"
      - "pyproject.toml"
      - "helm/**"
  pull_request:
    paths:
      - ".github/**"
      - "**.py"
      - "pyproject.toml"
      - "helm/**"

jobs:
  e2e-k8s-functionality-test:
    name: E2E Kubernetes Functionality Test
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      # Step 0: Maximize runner space to ensure sufficient disk space for the workflow
      - name: Maximize runner space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 30720
          temp-reserve-mb: 10240
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
      # Step 1: Check out the repository code to prepare for the build and deployment steps
      - name: Check out repository code
        uses: actions/checkout@v4

      # Step 2: Build and tag the Docker image for the application
      - name: Build Docker image
        env:
          DOCKER_IMAGE_NAME: localhost:5000/git-act-router
        run: |
          docker build --build-arg INSTALL_OPTIONAL_DEP=default \
            -t "$DOCKER_IMAGE_NAME" \
            -f docker/Dockerfile .

      # Step 3: Create a Kubernetes Kind cluster for testing the Helm chart
      - name: Create k8s Kind Cluster
        run: |
          # install kubectl
          curl -LO "https://dl.k8s.io/release/v1.28.3/bin/linux/amd64/kubectl"
          sudo chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

          # install kind
          curl -LO https://github.com/kubernetes-sigs/kind/releases/download/v0.20.0/kind-linux-amd64
          sudo chmod +x kind-linux-amd64
          sudo mv kind-linux-amd64 /usr/local/bin/kind
          kind version

          # create kind cluster
          kind_node_image="kindest/node:v1.23.17"
          echo "Kubernetes version: ${kind_node_image}"
          kind create cluster --name production-stack --image "${kind_node_image}"
          kubectl version
          kubectl get all --all-namespaces

      - name: Verify Kind cluster is ready
        run: |
          for i in {1..30}; do
            echo "Attempt ${i}/30: Checking cluster status..."
            if kubectl get nodes -o wide; then
              break
            else
              sleep 10
            fi

            if [ "${i}" -gt 10 ]; then
              echo "Cluster state details:"
              kubectl describe nodes
              kubectl get events --sort-by='.lastTimestamp' -A
              kubectl get pods -A -o wide
            fi
          done

          kubectl wait --for=condition=Ready nodes --all --timeout=600s

          printf "\n=== Cluster Details ===\n"
          kubectl config view
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl describe nodes
          kubectl get pods -A -o wide
          kubectl get events --sort-by='.lastTimestamp' -A
          helm version
          kubectl version

          printf "\n=== Final Cluster Health Check ===\n"
          kubectl get cs
          kubectl -n kube-system wait --for=condition=Ready pod --all --timeout=300s

      # Step 4: Load the Docker image into the Kind cluster to make it available for deployment
      - name: Load Docker image into Kind
        env:
          DOCKER_IMAGE_NAME: localhost:5000/git-act-router
        run: |
          kind load docker-image "$DOCKER_IMAGE_NAME" --name production-stack

      # Step 5: Run Helm tests with a matrix strategy to validate multiple configurations
      - name: Run Helm tests with matrix strategy
        env:
          DOCKER_BUILDKIT: 1
        run: |
          set -e

          TEST_SCENARIOS=(
            ".github/router.yaml routerSpec"
          )

          for SCENARIO in "${TEST_SCENARIOS[@]}"; do
            VALUES_FILE="$(echo "$SCENARIO" | cut -d' ' -f1)"
            echo "üöÄ Deploying scenario with values file: ${VALUES_FILE}"

            helm uninstall vllm || true

            helm lint ./helm || {
              echo "‚ùå Helm lint failed"
              exit 1
            }

            helm install vllm ./helm -f "$VALUES_FILE" --debug || {
              echo "‚ùå Helm install failed"
              kubectl get pods -A
              kubectl describe pod -l environment=router,release=router --namespace=default
              kubectl get events --sort-by='.lastTimestamp'
              exit 1
            }

            echo "‚è≥ Waiting for pods to be ready..."
            RETRIES=5
            LOG_DIR="output-logs"
            mkdir -p "$LOG_DIR"

            for i in $(seq 1 "${RETRIES}"); do
              if kubectl wait --for=condition=ready pod -l environment=router,release=router --namespace=default --timeout=120s; then
                break
              else
                echo "üö® Attempt ${i}/${RETRIES}: Pods failed to become ready"
                kubectl get pods -A -o wide
                kubectl describe pod -l environment=router,release=router --namespace=default
                kubectl get events --sort-by='.lastTimestamp'
                kubectl logs -l environment=router,release=router --namespace=default --all-containers=true --tail=50
                if [ "${i}" -eq "${RETRIES}" ]; then
                  echo "‚ùå Pods did not become ready after ${RETRIES} attempts."
                  exit 1
                fi
                echo "üîÑ Retrying in 10 seconds..."
                sleep 10
              fi
            done
          done

      # Step 6: Archive test results for debugging and record-keeping
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: helm-test-results
          path: |
            output-*

      # Step 7: Clean up resources to ensure no leftover artifacts or clusters remain
      - name: Cleanup Kind cluster
        run: |
          helm uninstall vllm || true
          kind delete clusters kind
        if: always()
